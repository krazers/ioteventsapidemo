{"version":3,"sources":["webpack:///./node_modules/@aws-amplify/ui-components/dist/esm-es5/amplify-federated-sign-in.entry.js","webpack:///./node_modules/@aws-amplify/ui-components/dist/esm-es5/auth-types-78df304e.js","webpack:///./node_modules/@aws-amplify/ui-components/dist/esm-es5/constants-206817b9.js"],"names":["logger","AmplifyFederatedSignIn","registerInstance","AuthState","Auth","_a","oauth","Object","h","authState","federated","MfaOption","ChallengeName","AuthFormField","UsernameAlias","USERNAME_SUFFIX","EMAIL_SUFFIX","CODE_SUFFIX","PHONE_SUFFIX","PASSWORD_SUFFIX","COUNTRY_DIAL_CODE_SUFFIX","COUNTRY_DIAL_CODE_DEFAULT","AUTH_SOURCE_KEY","SIGNING_IN_WITH_HOSTEDUI_KEY","AUTHENTICATOR_AUTHSTATE","PHONE_EMPTY_ERROR_MESSAGE","NO_AUTH_MODULE_FOUND","SETUP_TOTP","USER_NOT_SETUP_SOFTWARE_TOKEN_MFA","USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA","SUCCESS","AUTH_CHANNEL","UI_AUTH_CHANNEL","TOAST_AUTH_ERROR_EVENT","AUTH_STATE_CHANGE_EVENT"],"mappings":"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","file":"12.js","sourcesContent":["import { r as registerInstance, h } from './index-aae9287b.js';\nimport { ConsoleLogger } from '@aws-amplify/core';\nimport { A as AuthState } from './auth-types-78df304e.js';\nimport { N as NO_AUTH_MODULE_FOUND } from './constants-206817b9.js';\nimport { Auth } from '@aws-amplify/auth';\nvar logger = new ConsoleLogger('amplify-federated-sign-in');\nvar AmplifyFederatedSignIn = /** @class */ (function () {\n    function AmplifyFederatedSignIn(hostRef) {\n        registerInstance(this, hostRef);\n        /** The current authentication state. */\n        this.authState = AuthState.SignIn;\n        /** Federated credentials & configuration. */\n        this.federated = {};\n    }\n    AmplifyFederatedSignIn.prototype.componentWillLoad = function () {\n        if (!Auth || typeof Auth.configure !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        var _a = Auth.configure({}).oauth, oauth = _a === void 0 ? {} : _a;\n        // backward compatibility\n        if (oauth['domain']) {\n            this.federated.oauth_config = Object.assign(Object.assign({}, this.federated.oauth_config), oauth);\n        }\n        else if (oauth['awsCognito']) {\n            this.federated.oauth_config = Object.assign(Object.assign({}, this.federated.oauth_config), oauth['awsCognito']);\n        }\n        if (oauth['auth0']) {\n            this.federated.auth0 = Object.assign(Object.assign({}, this.federated.auth0), oauth['auth0']);\n        }\n    };\n    AmplifyFederatedSignIn.prototype.render = function () {\n        if (!this.federated) {\n            logger.debug('federated prop is empty. show nothing');\n            logger.debug('federated={google_client_id: , facebook_app_id: , amazon_client_id}');\n            return null;\n        }\n        if (!Object.values(AuthState).includes(this.authState)) {\n            return null;\n        }\n        logger.debug('federated Config is', this.federated);\n        return (h(\"amplify-form-section\", { \"data-test\": \"federated-sign-in-section\" }, h(\"amplify-section\", { \"data-test\": \"federated-sign-in-body-section\" }, h(\"amplify-federated-buttons\", { authState: this.authState, \"data-test\": \"federated-sign-in-buttons\", federated: this.federated }))));\n    };\n    return AmplifyFederatedSignIn;\n}());\nexport { AmplifyFederatedSignIn as amplify_federated_sign_in };\n","// TODO: Move these values to or extract them from the Cognito Provider in the Auth category for Auth V2\nvar AuthState;\n(function (AuthState) {\n    AuthState[\"SignUp\"] = \"signup\";\n    AuthState[\"SignOut\"] = \"signout\";\n    AuthState[\"SignIn\"] = \"signin\";\n    AuthState[\"Loading\"] = \"loading\";\n    AuthState[\"SignedOut\"] = \"signedout\";\n    AuthState[\"SignedIn\"] = \"signedin\";\n    AuthState[\"SigningUp\"] = \"signingup\";\n    AuthState[\"ConfirmSignUp\"] = \"confirmSignUp\";\n    AuthState[\"confirmingSignUpCustomFlow\"] = \"confirmsignupcustomflow\";\n    AuthState[\"ConfirmSignIn\"] = \"confirmSignIn\";\n    AuthState[\"confirmingSignInCustomFlow\"] = \"confirmingsignincustomflow\";\n    AuthState[\"VerifyingAttributes\"] = \"verifyingattributes\";\n    AuthState[\"ForgotPassword\"] = \"forgotpassword\";\n    AuthState[\"ResetPassword\"] = \"resettingpassword\";\n    AuthState[\"SettingMFA\"] = \"settingMFA\";\n    AuthState[\"TOTPSetup\"] = \"TOTPSetup\";\n    AuthState[\"CustomConfirmSignIn\"] = \"customConfirmSignIn\";\n    AuthState[\"VerifyContact\"] = \"verifyContact\";\n})(AuthState || (AuthState = {}));\nvar MfaOption;\n(function (MfaOption) {\n    MfaOption[\"TOTP\"] = \"TOTP\";\n    MfaOption[\"SMS\"] = \"SMS\";\n    MfaOption[\"NOMFA\"] = \"NOMFA\";\n})(MfaOption || (MfaOption = {}));\nvar ChallengeName;\n(function (ChallengeName) {\n    ChallengeName[\"SoftwareTokenMFA\"] = \"SOFTWARE_TOKEN_MFA\";\n    ChallengeName[\"SMSMFA\"] = \"SMS_MFA\";\n    ChallengeName[\"NewPasswordRequired\"] = \"NEW_PASSWORD_REQUIRED\";\n    ChallengeName[\"MFASetup\"] = \"MFA_SETUP\";\n    ChallengeName[\"CustomChallenge\"] = \"CUSTOM_CHALLENGE\";\n})(ChallengeName || (ChallengeName = {}));\nvar AuthFormField;\n(function (AuthFormField) {\n    AuthFormField[\"Password\"] = \"password\";\n})(AuthFormField || (AuthFormField = {}));\nvar UsernameAlias;\n(function (UsernameAlias) {\n    UsernameAlias[\"username\"] = \"username\";\n    UsernameAlias[\"email\"] = \"email\";\n    UsernameAlias[\"phone_number\"] = \"phone_number\";\n})(UsernameAlias || (UsernameAlias = {}));\nexport { AuthState as A, ChallengeName as C, MfaOption as M, UsernameAlias as U, AuthFormField as a };\n","// Dictionaries\n// fieldId constants\nvar USERNAME_SUFFIX = 'username';\nvar EMAIL_SUFFIX = 'email';\nvar CODE_SUFFIX = 'code';\nvar PHONE_SUFFIX = 'phone';\nvar PASSWORD_SUFFIX = 'password';\n// Country Dial Code common constants\nvar COUNTRY_DIAL_CODE_SUFFIX = 'country-dial-code-select';\nvar COUNTRY_DIAL_CODE_DEFAULT = '+1';\n// Auth Keys\nvar AUTH_SOURCE_KEY = 'amplify-auth-source';\nvar SIGNING_IN_WITH_HOSTEDUI_KEY = 'amplify-signin-with-hostedUI';\nvar AUTHENTICATOR_AUTHSTATE = 'amplify-authenticator-authState';\n// Error message Common Constants\nvar PHONE_EMPTY_ERROR_MESSAGE = 'Phone number can not be empty';\nvar NO_AUTH_MODULE_FOUND = 'No Auth module found, please ensure @aws-amplify/auth is imported';\n// TOTP Messages\nvar SETUP_TOTP = 'SETUP_TOTP';\n// Select MFA Types Messages\nvar USER_NOT_SETUP_SOFTWARE_TOKEN_MFA = 'User has not set up software token mfa';\nvar USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA = 'User has not verified software token mfa';\n// Common events\nvar SUCCESS = 'SUCCESS';\n// Hub Events and Channels\nvar AUTH_CHANNEL = 'auth';\nvar UI_AUTH_CHANNEL = 'UI Auth';\nvar TOAST_AUTH_ERROR_EVENT = 'ToastAuthError';\nvar AUTH_STATE_CHANGE_EVENT = 'AuthStateChange';\nexport { AUTH_CHANNEL as A, COUNTRY_DIAL_CODE_DEFAULT as C, EMAIL_SUFFIX as E, NO_AUTH_MODULE_FOUND as N, PHONE_EMPTY_ERROR_MESSAGE as P, SIGNING_IN_WITH_HOSTEDUI_KEY as S, TOAST_AUTH_ERROR_EVENT as T, UI_AUTH_CHANNEL as U, AUTH_STATE_CHANGE_EVENT as a, AUTHENTICATOR_AUTHSTATE as b, USER_NOT_SETUP_SOFTWARE_TOKEN_MFA as c, USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA as d, COUNTRY_DIAL_CODE_SUFFIX as e, PHONE_SUFFIX as f, SETUP_TOTP as g, SUCCESS as h, AUTH_SOURCE_KEY as i, CODE_SUFFIX as j, PASSWORD_SUFFIX as k, USERNAME_SUFFIX as l };\n"],"sourceRoot":""}