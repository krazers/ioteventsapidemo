import { r as registerInstance, h, H as Host } from './index-aae9287b.js';
import { Logger, Hub } from '@aws-amplify/core';
import { A as AuthState } from './auth-types-78df304e.js';
import { A as AUTH_CHANNEL, U as UI_AUTH_CHANNEL, a as AUTH_STATE_CHANGE_EVENT, T as TOAST_AUTH_ERROR_EVENT, S as SIGNING_IN_WITH_HOSTEDUI_KEY, N as NO_AUTH_MODULE_FOUND, b as AUTHENTICATOR_AUTHSTATE } from './constants-206817b9.js';
import { appendToCognitoUserAgent, Auth } from '@aws-amplify/auth';

const logger = new Logger('Authenticator');
const AmplifyAuthenticator = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /** Initial starting state of the Authenticator component. E.g. If `signup` is passed the default component is set to AmplifySignUp */
        this.initialAuthState = AuthState.SignIn;
        this.authState = AuthState.Loading;
        this.toastMessage = '';
        this.onAuthStateChange = (nextAuthState, data) => {
            if (nextAuthState === undefined)
                return logger.info('nextAuthState cannot be undefined');
            logger.info('Inside onAuthStateChange Method current authState:', this.authState);
            if (nextAuthState === AuthState.SignedOut) {
                this.authState = this.initialAuthState;
            }
            else {
                this.authState = nextAuthState;
            }
            if (data !== undefined) {
                this.authData = data;
                logger.log('Auth Data was set:', this.authData);
            }
            logger.info(`authState has been updated to ${this.authState}`);
        };
    }
    async componentWillLoad() {
        Hub.listen(AUTH_CHANNEL, ({ payload: { event, data } }) => {
            switch (event) {
                case 'cognitoHostedUI':
                    return this.onAuthStateChange(AuthState.SignedIn, data);
                case 'cognitoHostedUI_failure':
                case 'parsingUrl_failure':
                case 'signOut':
                case 'customGreetingSignOut':
                    return this.onAuthStateChange(AuthState.SignIn, null);
            }
        });
        Hub.listen(UI_AUTH_CHANNEL, data => {
            const { payload } = data;
            switch (payload.event) {
                case TOAST_AUTH_ERROR_EVENT:
                    if (payload.message)
                        this.toastMessage = payload.message;
                    break;
                case AUTH_STATE_CHANGE_EVENT:
                    if (payload.message) {
                        this.onAuthStateChange(payload.message, payload.data);
                        this.toastMessage = '';
                    }
                    break;
                default:
                    logger.warn('Unhandled Auth Event', payload.event);
            }
        });
        appendToCognitoUserAgent('amplify-authenticator');
        const byHostedUI = localStorage.getItem(SIGNING_IN_WITH_HOSTEDUI_KEY);
        localStorage.removeItem(SIGNING_IN_WITH_HOSTEDUI_KEY);
        if (byHostedUI !== 'true')
            await this.checkUser();
    }
    async checkUser() {
        if (!Auth || typeof Auth.currentAuthenticatedUser !== 'function') {
            throw new Error(NO_AUTH_MODULE_FOUND);
        }
        try {
            const user = await Auth.currentAuthenticatedUser();
            this.onAuthStateChange(AuthState.SignedIn, user);
        }
        catch (error) {
            let cachedAuthState = null;
            try {
                cachedAuthState = localStorage.getItem(AUTHENTICATOR_AUTHSTATE);
            }
            catch (error) {
                logger.debug('Failed to get the auth state from local storage', error);
            }
            try {
                if (cachedAuthState === AuthState.SignedIn) {
                    await Auth.signOut();
                }
                this.onAuthStateChange(this.initialAuthState);
            }
            catch (error) {
                logger.debug('Failed to sign out', error);
            }
        }
    }
    renderAuthComponent(authState) {
        switch (authState) {
            case AuthState.SignIn:
                return (h("slot", { name: "sign-in" }, h("amplify-sign-in", { federated: this.federated, usernameAlias: this.usernameAlias })));
            case AuthState.ConfirmSignIn:
                return (h("slot", { name: "confirm-sign-in" }, h("amplify-confirm-sign-in", { user: this.authData })));
            case AuthState.SignUp:
                return (h("slot", { name: "sign-up" }, h("amplify-sign-up", { usernameAlias: this.usernameAlias })));
            case AuthState.ConfirmSignUp:
                return (h("slot", { name: "confirm-sign-up" }, h("amplify-confirm-sign-up", { user: this.authData, usernameAlias: this.usernameAlias })));
            case AuthState.ForgotPassword:
                return (h("slot", { name: "forgot-password" }, h("amplify-forgot-password", { usernameAlias: this.usernameAlias })));
            case AuthState.ResetPassword:
                return (h("slot", { name: "require-new-password" }, h("amplify-require-new-password", { user: this.authData })));
            case AuthState.VerifyContact:
                return (h("slot", { name: "verify-contact" }, h("amplify-verify-contact", { user: this.authData })));
            case AuthState.TOTPSetup:
                return (h("slot", { name: "totp-setup" }, h("amplify-totp-setup", { user: this.authData })));
            case AuthState.Loading:
                return (h("slot", { name: "loading" }, h("div", null, "Loading...")));
            case AuthState.SignedIn:
                return [h("slot", { name: "greetings" }), h("slot", null)];
            default:
                throw new Error(`Unhandled auth state: ${authState}`);
        }
    }
    // eslint-disable-next-line
    componentDidUnload() {
        Hub.remove(UI_AUTH_CHANNEL, data => {
            const { payload } = data;
            if (payload.event === TOAST_AUTH_ERROR_EVENT && payload.message) {
                this.toastMessage = payload.message;
            }
        });
    }
    render() {
        return (h(Host, null, this.toastMessage ? (h("amplify-toast", { message: this.toastMessage, handleClose: () => {
                this.toastMessage = '';
            }, "data-test": "authenticator-error" })) : null, this.renderAuthComponent(this.authState)));
    }
};

export { AmplifyAuthenticator as amplify_authenticator };
