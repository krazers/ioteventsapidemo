import{r as t,h as s,H as a}from"./p-d292943b.js";import{Logger as e,Hub as i}from"@aws-amplify/core";import{A as r}from"./p-417bb5ea.js";import{A as n,U as o,a as l,T as h,S as u,N as c,b as m}from"./p-e70c33b3.js";import{appendToCognitoUserAgent as p,Auth as d}from"@aws-amplify/auth";const f=new e("Authenticator"),g=class{constructor(s){t(this,s),this.initialAuthState=r.SignIn,this.authState=r.Loading,this.toastMessage="",this.onAuthStateChange=(t,s)=>{if(void 0===t)return f.info("nextAuthState cannot be undefined");f.info("Inside onAuthStateChange Method current authState:",this.authState),this.authState=t===r.SignedOut?this.initialAuthState:t,void 0!==s&&(this.authData=s,f.log("Auth Data was set:",this.authData)),f.info("authState has been updated to "+this.authState)}}async componentWillLoad(){i.listen(n,({payload:{event:t,data:s}})=>{switch(t){case"cognitoHostedUI":return this.onAuthStateChange(r.SignedIn,s);case"cognitoHostedUI_failure":case"parsingUrl_failure":case"signOut":case"customGreetingSignOut":return this.onAuthStateChange(r.SignIn,null)}}),i.listen(o,t=>{const{payload:s}=t;switch(s.event){case h:s.message&&(this.toastMessage=s.message);break;case l:s.message&&(this.onAuthStateChange(s.message,s.data),this.toastMessage="");break;default:f.warn("Unhandled Auth Event",s.event)}}),p("amplify-authenticator");const t=localStorage.getItem(u);localStorage.removeItem(u),"true"!==t&&await this.checkUser()}async checkUser(){if(!d||"function"!=typeof d.currentAuthenticatedUser)throw new Error(c);try{const t=await d.currentAuthenticatedUser();this.onAuthStateChange(r.SignedIn,t)}catch(t){let s=null;try{s=localStorage.getItem(m)}catch(t){f.debug("Failed to get the auth state from local storage",t)}try{s===r.SignedIn&&await d.signOut(),this.onAuthStateChange(this.initialAuthState)}catch(t){f.debug("Failed to sign out",t)}}}renderAuthComponent(t){switch(t){case r.SignIn:return s("slot",{name:"sign-in"},s("amplify-sign-in",{federated:this.federated,usernameAlias:this.usernameAlias}));case r.ConfirmSignIn:return s("slot",{name:"confirm-sign-in"},s("amplify-confirm-sign-in",{user:this.authData}));case r.SignUp:return s("slot",{name:"sign-up"},s("amplify-sign-up",{usernameAlias:this.usernameAlias}));case r.ConfirmSignUp:return s("slot",{name:"confirm-sign-up"},s("amplify-confirm-sign-up",{user:this.authData,usernameAlias:this.usernameAlias}));case r.ForgotPassword:return s("slot",{name:"forgot-password"},s("amplify-forgot-password",{usernameAlias:this.usernameAlias}));case r.ResetPassword:return s("slot",{name:"require-new-password"},s("amplify-require-new-password",{user:this.authData}));case r.VerifyContact:return s("slot",{name:"verify-contact"},s("amplify-verify-contact",{user:this.authData}));case r.TOTPSetup:return s("slot",{name:"totp-setup"},s("amplify-totp-setup",{user:this.authData}));case r.Loading:return s("slot",{name:"loading"},s("div",null,"Loading..."));case r.SignedIn:return[s("slot",{name:"greetings"}),s("slot",null)];default:throw new Error("Unhandled auth state: "+t)}}componentDidUnload(){i.remove(o,t=>{const{payload:s}=t;s.event===h&&s.message&&(this.toastMessage=s.message)})}render(){return s(a,null,this.toastMessage?s("amplify-toast",{message:this.toastMessage,handleClose:()=>{this.toastMessage=""},"data-test":"authenticator-error"}):null,this.renderAuthComponent(this.authState))}};export{g as amplify_authenticator}