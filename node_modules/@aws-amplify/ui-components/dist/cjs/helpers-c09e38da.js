'use strict';

const core = require('@aws-amplify/core');
const authTypes = require('./auth-types-cd1f71d2.js');
const constants = require('./constants-c7bbe67d.js');

const hasShadowDom = (el) => {
    return !!el.shadowRoot && !!el.attachShadow;
};
const dispatchToastHubEvent = (error) => {
    core.Hub.dispatch(constants.UI_AUTH_CHANNEL, {
        event: constants.TOAST_AUTH_ERROR_EVENT,
        message: error.message,
    });
};
const dispatchAuthStateChangeEvent = (nextAuthState, data) => {
    core.Hub.dispatch(constants.UI_AUTH_CHANNEL, {
        event: constants.AUTH_STATE_CHANGE_EVENT,
        message: nextAuthState,
        data,
    });
};
const composePhoneNumberInput = (phoneNumber) => {
    if (!phoneNumber.phoneNumberValue) {
        throw new Error(constants.PHONE_EMPTY_ERROR_MESSAGE);
    }
    const sanitizedPhoneNumberValue = phoneNumber.phoneNumberValue.replace(/[-()\s]/g, '');
    return `${phoneNumber.countryDialCodeValue}${sanitizedPhoneNumberValue}`;
};
const checkUsernameAlias = (usernameAlias) => {
    if (!(usernameAlias in authTypes.UsernameAlias)) {
        throw new Error(`Invalid username Alias - ${usernameAlias}. Instead use ${Object.values(authTypes.UsernameAlias)}`);
    }
};

exports.checkUsernameAlias = checkUsernameAlias;
exports.composePhoneNumberInput = composePhoneNumberInput;
exports.dispatchAuthStateChangeEvent = dispatchAuthStateChangeEvent;
exports.dispatchToastHubEvent = dispatchToastHubEvent;
exports.hasShadowDom = hasShadowDom;
